
--[[ Custom UI Library parecida com Orion Lib, com suporte mobile, transparência, dropdown acima, tabs com linha azul de seleção,
botões de minimizar "-" e fechar "X"
]]--

local CustomLib = {}

local function createElement(class, props)
	local obj = Instance.new(class)
	for i,v in pairs(props) do
		obj[i] = v
	end
	return obj
end

function CustomLib:CreateWindow(titleText)
	local screenGui = createElement("ScreenGui", {Name = "CustomUILib", ResetOnSpawn = false})
	if syn and syn.protect_gui then syn.protect_gui(screenGui) end
	screenGui.Parent = game:GetService("CoreGui")

	local mainFrame = createElement("Frame", {
		Size = UDim2.new(0, 450, 0, 320),
		Position = UDim2.new(0.5, -225, 0.5, -160),
		BackgroundColor3 = Color3.fromRGB(30, 30, 30),
		BackgroundTransparency = 0.2,
		AnchorPoint = Vector2.new(0.5, 0.5),
		Parent = screenGui
	})
	createElement("UICorner", {CornerRadius = UDim.new(0, 8), Parent = mainFrame})
	createElement("UIStroke", {Color = Color3.fromRGB(0, 170, 255), Thickness = 1.2, Parent = mainFrame})

	local title = createElement("TextLabel", {
		Text = titleText or "Custom UI",
		Size = UDim2.new(1, -80, 0, 30),
		Position = UDim2.new(0, 10, 0, 5),
		BackgroundTransparency = 1,
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Font = Enum.Font.GothamBold,
		TextScaled = true,
		TextXAlignment = Enum.TextXAlignment.Left,
		Parent = mainFrame
	})

	local drag = Instance.new("Frame", mainFrame)
	drag.Size = UDim2.new(1, 0, 0, 40)
	drag.BackgroundTransparency = 1
	local dragging, offset
	drag.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.Touch then
			dragging = true
			offset = input.Position - mainFrame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then dragging = false end
			end)
		end
	end)
	game:GetService("UserInputService").InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.Touch) then
			mainFrame.Position = UDim2.new(0, input.Position.X - offset.X, 0, input.Position.Y - offset.Y)
		end
	end)

	local tabHolder = createElement("Frame", {
		Size = UDim2.new(0, 120, 1, -50),
		Position = UDim2.new(0, 10, 0, 45),
		BackgroundTransparency = 1,
		Parent = mainFrame
	})

	local contentHolder = createElement("Frame", {
		Size = UDim2.new(1, -140, 1, -60),
		Position = UDim2.new(0, 130, 0, 50),
		BackgroundTransparency = 1,
		Parent = mainFrame
	})

	local tabs = {}

	function CustomLib:CreateTab(tabName)
		local tabFrame = createElement("Frame", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			Visible = (#tabs == 0),
			Parent = contentHolder
		})

		local layout = createElement("UIListLayout", {
			Parent = tabFrame,
			SortOrder = Enum.SortOrder.LayoutOrder,
			Padding = UDim.new(0, 5)
		})

		local buttonHolder = createElement("Frame", {
			Size = UDim2.new(1, -10, 0, 30),
			Position = UDim2.new(0, 5, 0, (#tabs * 35)),
			BackgroundTransparency = 1,
			Parent = tabHolder
		})

		local button = createElement("TextButton", {
			Text = tabName,
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.fromRGB(50, 50, 50),
			TextColor3 = Color3.new(1,1,1),
			Font = Enum.Font.Gotham,
			TextScaled = true,
			Parent = buttonHolder
		})
		createElement("UICorner", {CornerRadius = UDim.new(0, 6), Parent = button})

		local selectedLine = createElement("Frame", {
			Size = UDim2.new(1, 0, 0, 2),
			Position = UDim2.new(0, 0, 1, -2),
			BackgroundColor3 = Color3.fromRGB(0, 170, 255),
			Visible = (#tabs == 0),
			Parent = buttonHolder
		})

		button.MouseButton1Click:Connect(function()
			for _, v in pairs(contentHolder:GetChildren()) do
				if v:IsA("Frame") then v.Visible = false end
			end
			for _, v in pairs(tabHolder:GetChildren()) do
				if v:FindFirstChild("Frame") then
					v.Frame.Visible = false
				end
			end
			tabFrame.Visible = true
			selectedLine.Visible = true
		end)

		table.insert(tabs, tabFrame)

		local tabAPI = {}

		function tabAPI:AddLabel(text)
			createElement("TextLabel", {
				Text = text,
				Size = UDim2.new(1, -10, 0, 25),
				BackgroundColor3 = Color3.fromRGB(40, 40, 40),
				TextColor3 = Color3.new(1,1,1),
				Font = Enum.Font.Gotham,
				TextScaled = true,
				Parent = tabFrame
			})
		end

		function tabAPI:AddButton(text, callback)
			local btn = createElement("TextButton", {
				Text = text,
				Size = UDim2.new(1, -10, 0, 30),
				BackgroundColor3 = Color3.fromRGB(60, 60, 60),
				TextColor3 = Color3.new(1,1,1),
				Font = Enum.Font.Gotham,
				TextScaled = true,
				Parent = tabFrame
			})
			createElement("UICorner", {CornerRadius = UDim.new(0, 6), Parent = btn})
			btn.MouseButton1Click:Connect(callback)
		end

		function tabAPI:AddDropdown(text, options, callback)
			local dropdown = createElement("TextButton", {
				Text = text,
				Size = UDim2.new(1, -10, 0, 30),
				BackgroundColor3 = Color3.fromRGB(50, 50, 50),
				TextColor3 = Color3.new(1,1,1),
				Font = Enum.Font.Gotham,
				TextScaled = true,
				Parent = tabFrame
			})
			createElement("UICorner", {CornerRadius = UDim.new(0, 6), Parent = dropdown})

			local dropdownList = createElement("Frame", {
				Size = UDim2.new(1, 0, 0, #options * 25),
				Position = UDim2.new(0, 0, 0, -#options * 25),
				BackgroundColor3 = Color3.fromRGB(40, 40, 40),
				Visible = false,
				Parent = dropdown
			})
			createElement("UICorner", {CornerRadius = UDim.new(0, 4), Parent = dropdownList})

			for _, option in pairs(options) do
				local optionButton = createElement("TextButton", {
					Text = option,
					Size = UDim2.new(1, 0, 0, 25),
					BackgroundColor3 = Color3.fromRGB(60, 60, 60),
					TextColor3 = Color3.new(1,1,1),
					Font = Enum.Font.Gotham,
					TextScaled = true,
					Parent = dropdownList
				})
				createElement("UICorner", {CornerRadius = UDim.new(0, 4), Parent = optionButton})
				optionButton.MouseButton1Click:Connect(function()
					callback(option)
					dropdown.Text = text .. ": " .. option
					dropdownList.Visible = false
				end)
			end

			dropdown.MouseButton1Click:Connect(function()
				dropdownList.Visible = not dropdownList.Visible
			end)
		end

		return tabAPI
	end

	-- Minimize Button
	local minimizeButton = createElement("TextButton", {
		Text = "-",
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -70, 0, 5),
		BackgroundColor3 = Color3.fromRGB(20, 20, 20),
		TextColor3 = Color3.new(1, 1, 1),
		Font = Enum.Font.GothamBold,
		TextScaled = true,
		Parent = mainFrame
	})
	createElement("UICorner", {CornerRadius = UDim.new(0, 6), Parent = minimizeButton})

	local minimized = false
	minimizeButton.MouseButton1Click:Connect(function()
		minimized = not minimized
		for _, v in pairs(mainFrame:GetChildren()) do
			if v:IsA("Frame") and v ~= tabHolder and v ~= contentHolder then
				v.Visible = not minimized
			end
		end
		tabHolder.Visible = not minimized
		contentHolder.Visible = not minimized
	end)

	-- Close Button
	local closeButton = createElement("TextButton", {
		Text = "X",
		Size = UDim2.new(0, 30, 0, 30),
		Position = UDim2.new(1, -35, 0, 5),
		BackgroundColor3 = Color3.fromRGB(60, 0, 0),
		TextColor3 = Color3.new(1, 1, 1),
		Font = Enum.Font.GothamBold,
		TextScaled = true,
		Parent = mainFrame
	})
	createElement("UICorner", {CornerRadius = UDim.new(0, 6), Parent = closeButton})
	closeButton.MouseButton1Click:Connect(function()
		screenGui:Destroy()
	end)

	return CustomLib
end

return CustomLib
